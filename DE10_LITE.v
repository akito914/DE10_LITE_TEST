`timescale 1ns/1ns

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	assign HEX0[7] = 1;
	assign HEX1[7] = 1;
	assign HEX2[7] = 1;
	assign HEX3 = 8'hFF;
	assign HEX4 = 8'hFF;
	assign HEX5 = 8'hFF;
	
	
	reg [9:0] counter = 0;
	
	reg [1:0] key0_buf = 2'b00;
	reg [1:0] key1_buf = 2'b00;
	
	
	reg clk = 1'b0;
	
	
	seg7led segLED0 (
		.bin_in(counter[3:0]),
		.seg_out(HEX0[6:0])
	);
	
	seg7led segLED1 (
		.bin_in(counter[7:4]),
		.seg_out(HEX1[6:0])
	);
	
	seg7led segLED2 (
		.bin_in(counter[9:8]),
		.seg_out(HEX2[6:0])
	);

//=======================================================
//  Structural coding
//=======================================================

	always @(posedge MAX10_CLK1_50)
	begin
		key0_buf[0] <= KEY[0];
		key0_buf[1] <= key0_buf[0];
		key1_buf[0] <= KEY[1];
		key1_buf[1] <= key1_buf[0];
	end


	always @ (posedge MAX10_CLK1_50)
	begin
		if(key0_buf[1:0] == 2'b10)
			counter <= counter + 10'd1;
		else if(key1_buf[1:0] == 2'b01)
			counter <= 10'd0;
	end
	
	assign LEDR = counter;
	
	always #10 begin
		clk = ~clk;
	end
	


endmodule
